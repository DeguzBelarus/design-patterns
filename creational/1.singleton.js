// Одиночка (англ. Singleton) — порождающий шаблон проектирования, гарантирующий, что
// в однопоточном приложении будет единственный экземпляр некоторого класса,
// и предоставляющий глобальную точку доступа к этому экземпляру.

// Цель
// У класса есть только один экземпляр, и он предоставляет к нему глобальную точку доступа.
// При попытке создания данного объекта он создаётся только в том случае, если ещё не существует,
// в противном случае возвращается ссылка на уже существующий экземпляр и нового выделения памяти
// не происходит. Существенно то, что можно пользоваться именно экземпляром класса, так как при этом 
// во многих случаях становится доступной более широкая функциональность. Например, к описанным
// компонентам класса можно обращаться через интерфейс, если такая возможность поддерживается языком.

// Применение
// должен быть ровно один экземпляр некоторого класса, легко доступный всем клиентам;
// единственный экземпляр должен расширяться путём порождения подклассов, и клиентам нужно иметь 
// возможность работать с расширенным экземпляром без модификации своего кода.

// Реализации
// 1 Без использования сокрытия переменных есть простое решение, основанное на том, что функция Singleton
// является объектом. Минусом является возможность изменения свойства instance вне класса:
function Singleton() {
  const instance = Singleton.instance;
  if (instance) return instance;
  Singleton.instance = this;
}
Singleton.prototype.test = function () {};

// 2 Метод, основанный на сокрытии переменных с помощью замыканий. В качестве бонуса - возможность объявлять
// приватные методы и свойства, которые будут доступны и конструктору и методам "класса".
const Singleton = (function () {
  let instance;
  // Приватные методы и свойства
  // Конструктор
  function Singleton() {
    if (instance) return instance;
    instance = this;
  }
  // Публичные методы
  Singleton.prototype.test = function () {};
  return Singleton;
})();
