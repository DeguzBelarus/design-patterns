// Модуль — это самостоятельный фрагмент кода, который можно изменять, не затрагивая другой код проекта. Модули, кроме того, позволяют избегать
// такого явления, как загрязнение областей видимости, благодаря тому, что они создают отдельные области видимости для объявляемых в них переменных.
// Модули, написанные для одного проекта, можно повторно использовать в других проектах, в том случае, если их механизмы универсальны и не
// привязаны к особенностям конкретного проекта.
// Модули— это составная часть любого современного JavaScript - приложения.Они помогают поддерживать чистоту кода, способствуют разделению кода на
// осмысленные фрагменты и помогают его организовывать.В JavaScript существует множество способов создания модулей, одним из которых является
// паттерн« Модуль»(Module).
// В отличие от других языков программирования, JavaScript не имеет модификаторов доступа.То есть, переменные нельзя объявлять как приватные или
// публичные.В результате паттерн« Модуль» используется ещё и для эмуляции концепции инкапсуляции.
// Этот паттерн использует IIFE(Immediately - Invoked Function Expression, немедленно вызываемое функциональное выражение), замыкания и области
// видимости функций для имитации этой концепции.

// Реализация
const  { publicMethod } = ((injectedArgument) => {
  console.log(injectedArgument); // выводим значение переданного в функцию аргумента
  // объявляем приватную переменную и функцию
  const privateVariable = 'Hello World';
  function privateMethod() {
    console.log(privateVariable);
  }
  // возвращаем объект, который будет предоставлен, как публичный интерфейс (с открытыми методами и свойствами)
  return {
    publicMethod() {
      // публичный открытый метод вызывает приватный метод
      privateMethod();
    }
  }
})('injected value'); // вызываем IIFE с необходимыми значениями
publicMethod(); // Hello World

// «Открытый модуль» (Revealing Module)
// Паттерн «Открытый модуль» представляет собой улучшенную версию паттерна «Модуль», которую предложил Кристиан Хейльманн. Проблема паттерна
// «Модуль» заключается в том, что нам приходится создавать публичные функции только для того, чтобы обращаться к приватным функциям и переменным.
// В рассматриваемом паттерне мы назначаем свойствам возвращаемого объекта приватные функции, которые хотим сделать общедоступными.Именно поэтому
// данный паттерн и называют« Открытый модуль».

// Реализация
const { getName, greeting, setName } = (() => {
  let privateVariable = 'Peter';
  const publicVariable = 'Hello World';
  function privateFunction() {
    console.log('Name: ' + privateVariable);
  }
  function publicSetName(name) {
    privateVariable = name;
  }
  function publicGetName() {
    privateFunction();
  }
  // открываем функции и переменные, сохраняя их ссылки в свойства возвращаемого объекта
  return {
    setName: publicSetName,
    greeting: publicVariable,
    getName: publicGetName
  };
})();
setName('Mark');
getName(); // Name: Mark 

// Преимущества паттерна «Открытый модуль» перед паттерном «Модуль»:
// 1 «Открытый модуль» позволяет делать общедоступными скрытые сущности модуля(и снова скрывать их, если нужно), модифицируя, для каждой из них,
// лишь одну строку в объекте, возвращаемом после выполнения IIFE.
// 2 Возвращаемый объект не содержит определения функций. Это способствует чистоте кода и упрощает его чтение.
