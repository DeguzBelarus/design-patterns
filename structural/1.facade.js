// Шаблон фасад (англ. Facade) — структурный шаблон проектирования, позволяющий скрыть сложность системы путём сведения всех возможных
// внешних вызовов к одному объекту, делегирующему их соответствующим объектам системы.

// Проблема
// Как обеспечить унифицированный интерфейс с набором разрозненных реализаций или интерфейсов, например, с подсистемой, если нежелательно
// сильное связывание с этой подсистемой или реализация подсистемы может измениться?

// Решение
// Определить одну точку взаимодействия с подсистемой — фасадный объект, обеспечивающий общий интерфейс с подсистемой, и возложить на него
// обязанность по взаимодействию с её компонентами. Фасад — это внешний объект, обеспечивающий единственную точку входа для служб подсистемы.
// Реализация других компонентов подсистемы закрыта и не видна внешним компонентам. Фасадный объект обеспечивает реализацию GRASP паттерна
// Устойчивый к изменениям (Protected Variations) с точки зрения защиты от изменений в реализации подсистемы.

// Особенности применения
// Шаблон применяется для установки некоторого рода политики по отношению к другой группе объектов. Если политика должна быть яркой и заметной,
// следует воспользоваться услугами шаблона Фасад. Если же необходимо обеспечить скрытность и аккуратность (прозрачность), более подходящим
// выбором является шаблон Заместитель (Proxy).

// Реализации
// Complex parts
function SubSystem1() { // Первый конструктор объекта с одним методом 
  this.method1 = function () {
    console.log("вызван subSystem1.method1");
  };
}
function SubSystem2() { // Второй конструктор объекта с двумя методами
  this.method1 = function () {
    console.log("вызван subSystem2.method1");
  };
  this.method2 = function () {
    console.log("вызван subSystem2.method2");
  };
}

// Facade
function Facade() { // Конструктор объекта-фасада (реализация паттерна)
  // Создаём экземпляры зависимых конструкторов
  const s1 = new SubSystem1();
  const s2 = new SubSystem2();
  // Предоставляемые методы фасада
  // добавляем в них вызов методов зависимых объектов
  this.method1 = function () {
    console.log("вызван facade.method1");
    s1.method1();
    s2.method1();
  };
  this.method2 = function () {
    console.log("вызван facade.method2");
    s2.method2();
  };
}

// Client
function test() {
  const facade = new Facade(); // создаём объект-экземпляр фасад
  // вызываем методы фасада, что приведёт ещё и к вызовам методов подсистем
  facade.method1();
  facade.method2();
}
test();

/*
Выведет:
"вызван facade.method1"
"вызван subSystem1.method1"
"вызван subSystem2.method1"
"вызван facade.method2"
"вызван subSystem2.method2"
 */